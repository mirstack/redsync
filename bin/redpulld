#!/usr/bin/env python

usage = """\
Usage:

  redpulld [-d] [-h] [-s] [-v] HOST PORT CHANNEL

Subscribes Redis PUB/SUB channel CHANNEL of the server hosted on HOST:PORT and
passes received messages to standard output. Both HOST and PORT arguments must
be provided.

Options:

  -d  Debug mode.
  -h  Shows help screen.
  -s  Silent mode.
  -v  Print version number and exit.

For more information check 'man redpulld'.\
"""

version = "0.0.2"

import logging as log
import sys
import getopt
import redis

log_format='%(levelname)s -- %(message)s'
log.basicConfig(level=log.INFO, format=log_format)

def init(argv):
    opts, args = getopt.getopt(argv, "dhsv")
    host, port, chan = None, None, None

    for opt,val in opts:
        if opt == '-h':
            print(usage)
            exit(0)
        elif opt == '-v':
            print(version)
            exit(0)
        elif opt == '-d':
            log.debug("debug mode enabled")
            log.basicConfig(level=log.DEBUG)
        elif opt == '-s':
            log.disable(log.CRITICAL)
        else:
            print(usage)
            exit(1)

    if len(args) == 3:
        host, port, chan = args
    elif len(args) < 3:
        log.error("not enough arguments")
        exit(1)
    else:
        log.error("invalid number of arguments")
        exit(1)

    if host == "" or port == "" or chan == "":
        log.error("invalid arguments")
        exit(1)

    return (host, port, chan)

def main(host, port, chan):
    log.debug("connecting to redis at %s:%d", host, int(port))

    r = redis.StrictRedis(host=host, port=int(port), db=0)

    try:
        log.debug("trying to subscribe channel: %s", chan)

        pubsub = r.pubsub()
        pubsub.subscribe(chan)

        try:
            for item in pubsub.listen():
                log.debug("received packet: %s", item)

                typ, msg = item['type'], item['data']

                if typ == 'subscribe' and item['channel'] == chan:
                    log.info("subscribed to channel: %s", chan)
                elif typ == 'message':
                    log.info("message received: %s", msg)
                    sys.stdout.write("%s\n" % msg)
                    sys.stdout.flush()
                else:
                    log.info("invalid message: %s", item)

        except KeyboardInterrupt:
            pass # swallow...

    except redis.exceptions.ConnectionError as err:
        log.critical(str(err))
        exit(1)

if __name__ == "__main__":
    host, port, chan = init(sys.argv[1:])
    main(host, port, chan)
